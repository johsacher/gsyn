#!/bin/bash
# still todo
# for now: gsyn_up after every change / gsyn_down when switching device
# --> no problems obeying SIMPLE RULE:
#     when switching machines:
#          when leaving old machine:
#               gsyn_up on old machine
#          when start working on new machine:   
#               gsyn_down on new machine

gsyn_addcommit() {
    owd=$(pwd)
    path=$1
    if [[ ! -z "$path" ]] #not(!) empty(-z)
    then
        cd $path
    # else: do nothing, suppose we are in the right
    fi
    echo 'git add -A ...'
    git add -A
    echo "git commit -m '.' ..."
    git commit -m '.'
    cd $owd
}

gsyn_push() {
    owd=$(pwd)
    path=$1
    if [[ ! -z "$path" ]] #not(!) empty(-z)
    then
        cd $path
    # else: do nothing, suppose we are in the right
    fi
    echo 'git push ...'
    git push
    cd $owd
}
gsyn_up() {
    owd=$(pwd)
    path=$1
    if [[ ! -z "$path" ]] #not(!) empty(-z)
    then
        cd $path
    # else: do nothing, suppose we are in the right
    fi
    echo 'git add -A ...'
    git add -A
    echo "git commit -m '.' ..."
    git commit -m '.'
    echo 'git push ...'
    git push
    cd $owd
}

gsyn_down() {
    owd=$(pwd)
    path=$1
    if [[ ! -z "$path" ]]
    then
        cd $path
    # else: do nothing, suppose we are in the right
    fi
    echo 'git pull ...' ;
    git pull ;
    cd $owd
}



gsyn_up_all ()
{
    for repo in $(cat "$HOME/.gsyn/repositories") 
    do
        echo  ; echo  
        echo "synching up $repo..."
        echo "------------------------------------------"
        # expand home
        repo=$(echo $repo | sed 's|\~|'$HOME'|g')
        repo=$(echo $repo | sed 's|$HOME|'$HOME'|g')
        if [[ -d $repo ]] ; then
            gsyn_up $repo
        else
            echo "error: directory $repo does not exist, check ./gsyn/repositories"
        fi
    done
}

gsyn_down_all ()
{
    for repo in $(cat "$HOME/.gsyn/repositories") 
    do
        echo  ; echo  
        echo "synching down $repo..."
        echo "------------------------------------------"
        # expand home
        repo=$(echo $repo | sed 's|\~|'$HOME'|g')
        repo=$(echo $repo | sed 's|$HOME|'$HOME'|g')
        if [[ -d $repo ]] ; then
            gsyn_down $repo
        else
            echo "error: directory $repo does not exist, check ./gsyn/repositories"
        fi
    done
}


#* checkin/checkout - abstraction level
#  (at this level the user "just" checks in / checks out machines, and should not encounter any merging conflicts)
#  (since the idea of check-in/out system: only one machine at a time can work on the most current state of the projects)
#  (only necessary commands than are:
#  >> gsyn_checkin
#  >> gsyn_checkout

set_GSYN_THIS_MACHINE_NAME ()
{
    if [[ -f "$HOME/.gsyn/this_machine_name" ]] ; then
        GSYN_THIS_MACHINE_NAME=$(cat $HOME/.gsyn/this_machine_name)
    else
        echo "error: file $HOME/.gsyn/this_machine_name does not exist, add it and put some machine name of your choice there in the first line."
    fi

    # bash does not have the concept of return arguments... it is after all a primitive language. but: all variables are shared with calling environment ->
    # --> so work flow in bash is like this: we do not "give back" return parameters, insteady we "fill" global environment variables! (here: GSYN_THIS_MACHINE_NAME)
}

set_GSYN_CHECKED_IN_MACHINE ()
{
    if [[ -f "$HOME/.gsyn/checked_in_machine" ]] ; then
        GSYN_CHECKED_IN_MACHINE=$(cat $HOME/.gsyn/checked_in_machine)
    else
        echo "error: file $HOME/.gsyn/checked_in_machine does not exist, add it and put some machine name of your choice there in the first line."
    fi

    # bash does not have the concept of return arguments... it is after all a primitive language. but: all variables are shared with calling environment ->
    # --> so work flow in bash is like this: we do not "give back" return parameters, insteady we "fill" global environment variables! (here: GSYN_THIS_MACHINE_NAME)
}


set_checked_in_machine_this_machine ()
{
    set_GSYN_THIS_MACHINE_NAME
    echo $GSYN_THIS_MACHINE_NAME > $HOME/.gsyn/checked_in_machine
}

set_checked_in_machine_none ()
{
    echo "none" > $HOME/.gsyn/checked_in_machine
}

gsyn_checkout ()
{
    #* first check if i am allowed to checkin (requires checked_in_machine to be "none")
    gsyn_down $HOME/.gsyn # this just updates(uploads) the ~/.gsyn/checked_in_machine -> see if other machine is checked in
    set_GSYN_CHECKED_IN_MACHINE
    set_GSYN_THIS_MACHINE_NAME

    #* 3 scenarios: (1) none checked in ; (2) already checked in ; (3) other machine checked in

    #** scenario (1) none
    if [[ $GSYN_CHECKED_IN_MACHINE = "none" ]] ; then
        echo "Currently checked in machine to gsyn: none. --> already checked out."

    #** scenario (2) checked in
    elif [[ $GSYN_CHECKED_IN_MACHINE = $GSYN_THIS_MACHINE_NAME ]] ; then
        echo "This machine $GSYN_THIS_MACHINE_NAME is currently checked in and will be checked out now..."
        #*** check in this machine
        echo "    update(upload) server..."
        echo "    ------------------------------------"
        echo "    ------------------------------------"
        gsyn_up_all # (just in case) get up-to-date state of projects 
        #*** when successfully uploaded -> "officially check out"
        set_checked_in_machine_none # writes "none" to ~/.gsyn/checked_in_machine -> to tell other machines that they are allowed to checkin
        gsyn_up $HOME/.gsyn # this just updates(uploads) the ~/.gsyn/checked_in_machine -> visible for other machines
        echo "... Machine checked out successfully out off gsyn."

    #** scenario (3) already other machine
    else
        echo
        echo
        echo "Other machine already/still checked in, with machine name:"
        echo "    $GSYN_CHECKED_IN_MACHINE  "
        echo "check in not allowed! --> check out other machine first!"
    fi
}

gsyn_checkin ()
{
    #* first check if i am allowed to checkin (requires checked_in_machine to be "none")
    gsyn_down $HOME/.gsyn # this just updates(uploads) the ~/.gsyn/checked_in_machine -> see if other machine is checked in
    set_GSYN_CHECKED_IN_MACHINE
    set_GSYN_THIS_MACHINE_NAME

    #* 3 scenarios: (1) none checked in ; (2) already checked in ; (3) other machine checked in

    #** scenario (1) none
    if [[ $GSYN_CHECKED_IN_MACHINE = "none" ]] ; then
        echo "Currently checked in machine to gsyn: none. --> check in this machine $GSYN_THIS_MACHINE."

        #*** check in this machine
        gsyn_down_all # get up-to-date state of projects
        set_checked_in_machine_this_machine # writes <this_machine_name> to ~/.gsyn/checked_in_machine -> to tell other machines that they are NOT allowed to checkin
        gsyn_up $HOME/.gsyn # this just updates(uploads) the ~/.gsyn/checked_in_machine -> visible for other machines

        echo "... Machine $GSYN_THIS_MACHINE_NAME checked in successfully into gsyn."

    #** scenario (2) already checked in
    elif [[ $GSYN_CHECKED_IN_MACHINE = $GSYN_THIS_MACHINE_NAME ]] ; then
        echo "This machine $GSYN_THIS_MACHINE_NAME is already checked in into gsyn."
        #*** check in this machine

        echo "     just for safety perform gsyn_down_all..."
        echo "------------------------------------------"
        echo "------------------------------------------"
        gsyn_down_all # (just in case) get up-to-date state of projects 
        set_checked_in_machine_this_machine # writes <this_machine_name> to ~/.gsyn/checked_in_machine -> to tell other machines that they are NOT allowed to checkin
        gsyn_up $HOME/.gsyn # this just updates(uploads) the ~/.gsyn/checked_in_machine -> visible for other machines

        echo "... Machine $GSYN_THIS_MACHINE_NAME checked in successfully into gsyn."

    #** scenario (3) already other machine
    else
        echo
        echo
        echo "Other machine already/still checked in, with machine name:"
        echo "    $GSYN_CHECKED_IN_MACHINE  "
        echo "check in not allowed! --> check out other machine first!"
    fi
}


# some handy aliases (easier for command line, history completion)
in_gsyn ()
{
    gsyn_checkin
}

out_gsyn ()
{
    gsyn_checkout
}

gsyn_setup_local_to_server ()
{
    echo "reading config (gsyn_config_vars)..."
    if test -f "gsyn_config_vars"; then
        source gsyn_config_vars
        echo
        echo "file gsyn_config_vars found and sourced."
    else
        echo
        echo "file gsyn_config_vars not found. make sure you re in the same directory, when executing."
        return 1
    fi
    echo "your config is this:"

    echo
    echo "repo_name:             " $repo_name
    echo "local_dir_repo:        " $local_dir_repo
    echo "server_dir_bare_repos: " $server_dir_bare_repos
    echo "server_dir_repo:       " $server_dir_repo
    echo "ssh_host_alias:        " $ssh_host_alias
    echo "remote_name:           " $remote_name
    echo

    echo "you sure everything ok? then continue with any key press."
    echo "(mind: '~' in these strings I will be expanded automatically for local machine/server respectively)"
    read -rsn1 -p"Press any key to continue" pressed_key;echo
    echo $pressed_key


    echo "   expanding '~' to absolute paths (both local and server)"
    # ** getting '~' expansion local and home

    echo "   retrieving absolute home path from server..."
    ssh $ssh_host_alias "cd ~ ; pwd > ~/this_server_absolute_path_home.txt"
    rsync --progress -va -I $ssh_host_alias:~/this_server_absolute_path_home.txt ~/
    home_path_server=$(cat ~/this_server_absolute_path_home.txt)
    home_path_local=~
    echo
    echo "   retrieved absolute home path from server: complete."
    echo "   the home path on server is: " $home_path_server

    local_dir_repo=$(echo $local_dir_repo | sed 's|~|'$home_path_local'|g')
    server_dir_repo=$(echo $server_dir_repo | sed 's|~|'$home_path_server'|g')
    server_dir_bare_repos=$(echo $server_dir_bare_repos | sed 's|~|'$home_path_server'|g')

    echo
    echo "your variables after '~'-expansion: "
    echo
    echo "repo_name:             " $repo_name
    echo "local_dir_repo:        " $local_dir_repo
    echo "server_dir_bare_repos: " $server_dir_bare_repos
    echo "server_dir_repo:       " $server_dir_repo
    echo "ssh_host_alias:        " $ssh_host_alias
    echo "remote_name:           " $remote_name
    echo

    echo "you sure everything ok? then continue with any key press."

    read -rsn1 -p"Press any key to continue" pressed_key;echo
    echo $pressed_key


    # * step 1 (server)
    echo
    echo "Step 1 (on server): init new bare repo..."
    command="cd $server_dir_bare_repos && git init --bare $repo_name.git"
    echo "    performing command on ssh server: $command"
    ssh $ssh_host_alias $command
    echo 
    echo "    done."
    echo

    # * step 2 (local machine)
    echo
    echo "Step 2 (on local machine): add remote to local repo, add/commit and push..."
    cd $local_dir_repo
    echo "executing: git remote add $remote_name $ssh_host_alias:$server_dir_bare_repos/$repo_name.git..."
    echo "executing: git remote add $remote_name $ssh_host_alias:$server_dir_bare_repos/$repo_name.git"
    git remote add $remote_name $ssh_host_alias:$server_dir_bare_repos/$repo_name.git

    echo "executing: git add -A ; git commit -m '.' "
    git add -A ; git commit -m '.'
    echo "executing: git push $remote_name master"
    git push $remote_name master
    echo "    done."
    echo

    # * step 3 (server)
    echo "Step 3 (on server): create real repo directory/ clone bare repo..."
    command="mkdir $server_dir_repo"
    command="$command ; cd $server_dir_repo"
    command="$command ; git clone $server_dir_bare_repos/$repo_name.git . " # (if the current directory is empty, you can add "." no folder created, just content cloned)
    ssh $ssh_host_alias $command
}

gsyn_setup_local_to_server_instructions ()
{
    echo "this is just an instruction. execute the following on your local machine / server"
    echo
    echo "0. prepare the gsyn_config_vars file, copy it to both local and server machine. e.g. like this: 
    # file gsyn_config_vars
    # ----------------------------
    repo_name=MyEmacsConfig
    local_dir_repo=/home/johannes/$repo_name
    server_dir_bare_repos=/homes2/ifvt/sacher/gitBareRepos # don t use ~ or $HOME -> would be expanded differently on machines
    server_dir_repo=~/$repo_name
    ssh_host_alias=mathe
    remote_name=origin_mathe "

    echo 
    echo "1. on server        : run gsyn_setup_local_to_server_step1server "
    echo "2. on local machine : run gsyn_setup_local_to_server_step2local "
    echo "3. on server        : run gsyn_setup_local_to_server_step3server "
    # 
}

gsyn_setup_local_to_server_step1server ()
{
    echo "gsyn_setup_local_to_server step 1... (init bare repo on server)"
    source gsyn_config_vars
    cd $server_dir_bare_repos
    git init --bare $repo_name.git # this is a convenction -> name bare repose with .git extension ("Also, it's conventional to give bare repositories the extension .git" https://stackoverflow.com/questions/7632454/how-do-you-use-git-bare-init-repository)
}

gsyn_setup_local_to_server_step2local ()
{
    echo "gsyn_setup_local_to_server step 2... (add remote to local repo and push)"
    source gsyn_config_vars
    cd $local_dir_repo
    git remote add $remote_name $ssh_host_alias:$server_dir_bare_repos/$repo_name.git
    git add -A ; git commit -m '.' ; # first update 
    git push $remote_name master
}

gsyn_setup_local_to_server_step3server ()
{
    source gsyn_config_vars
    echo "gsyn_setup_local_to_server step 3... (create real repo directory, clone bare repo)"
    mkdir $server_dir_repo
    cd $server_dir_repo
    git clone $server_dir_bare_repos/$repo_name.git . # (if the current directory is empty, you can add "." no folder created, just content cloned)
}

dummy_test_ssh_with_command ()
{
    host_alias=blogin
    ssh $host_alias "touch test.txt"
}

gsyn ()
{
    # save/secure local edits
    gsyn_addcommit
    # get/merge server state
    gsyn_down
    # push everything to server
    gsyn_push
}

# while :
# do
#     # todo: for all repos (get from file ~/.gsyn/repositories
#     sleep 20
#     echo "* checking if sync necessary (master ahead (1)/remote ahead (2)/diverged(3)?)..."

#     echo "* remote ahead (1) --> sync down..."
#     # gsyn_down

#     echo "* local ahead (2) --> sync up..."
#     # gsyn_up

#     echo "* diverged (3) --> more difficult --> try to merge..."

# done


