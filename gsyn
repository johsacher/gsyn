#!/bin/sh
echo "* gsyn check/report args ..."
echo "i m gsyn command, i m in path: $(pwd)."

echo "my arguments are:"
echo "   argument \$0: $0"
echo "   argument \$1: $1"

# devnote: this file (the gsyn-command) is here in ~/bin directory so that NON-INTERACTIVE (sub-)shells can also use it (they don t get initiated with .bashrc, .profile, etc/profile or etc/bash.bashrc.
# so it s better to implement gsyn here fully without dependencies to other files

# todos (devnote): "merge" (somehow??..) the installation/implementation of "the source part" of gsyn (in ~.gsyn/gsyn) and "the installed program part" (here in ~/bin) -> syncing on machines 
#  ** maybe it s good to sync ~/gsyn and make an install.sh script (which puts gsyn-command into the ~/bin)

# echo "i m gsyn command."

# * save original path
set -e
set -u

owd=$(pwd)

# * arguments (path)
if [ -z ${1+x} ] # secure way to check if $1 is set ( if [ ! -z "1$" ] -> produces error: "bash: error 'parameter not set"
then
    # echo "arg 1 is unset"
    path=""
else
    # echo "arg 1 is set to $1"
    path=$1
fi

if [ ! -z "$path" ] #not(!) empty(-z)
then
    path=$1
    echo "path specified. execute gsyn in this directory: $path"
    cd $path
else # do nothing, suppose we are in the right
    echo "no path specified. execute gsyn in this directory: $(pwd)"
fi

# * sub-routines (functions)
gsyn_addcommit() {
    owd=$(pwd)
    if [ -z ${1+x} ] ; then path="$(pwd)" ; else path=$1 ; fi
    cd $path
    echo 'git add -A ...'
    git add -A
    echo "git commit -m '.' ..."
    git commit -m '.'
    cd $owd
}

gsyn_pull() {
    owd=$(pwd)
    if [ -z ${1+x} ] ; then path="$(pwd)" ; else path=$1 ; fi
    cd $path
    echo 'git pull ...'
    git push
    cd $owd
}

gsyn_push() {
    owd=$(pwd)
    if [ -z ${1+x} ] ; then path="$(pwd)" ; else path=$1 ; fi
    cd $path
    echo 'git push ...'
    git push
    cd $owd
}

# * steps
# ** step 1: secure ('save') local changes
echo "* gsyn step 1 - secure local changes ..."
gsyn_addcommit
# ** step 2: merge "mother" with local changes
#      -> scenario 1 (90%): when mother is unchanged, trivial, new state = local state
#      -> scenario 2 (9%): when mother is also changed, but different lines of same file, and/or different files -> git's auto-merge succeeds no problem, beautifull/automatic sync, even after /parallel editing of files/ (!) 
#      -> scenario 3 (1%): conflicting changes of same lines, mother vs local -> auto-merge fails -> for now: user has to manually delete conflicting lines, look for git's "HEAD/<<<<<</>>>>>>"-entries, which is also not that difficult, should not have happened with proper usage, but in future: can be dealt in a more automatic/UX-friendly way via interactive CLI or GUI
echo "* gsyn step 2 - fetch and merge mother ..."
gsyn_pull 
# ** step 3: upload the new state to the mother - i.e. push everything to the git-server
echo "* gsyn step 3 - upload new state to mother ..."
gsyn_push

# * return original directory
cd $owd
